# //  ModelSim SE 10.3b May 29 2014 Linux 3.10.0-514.16.1.el7.x86_64
# //
# //  Copyright 1991-2014 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION
# //  WHICH IS THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS
# //  LICENSORS AND IS SUBJECT TO LICENSE TERMS.
# //
# vsim -novopt tb_top 
# Start time: 16:36:06 on Nov 12,2017
# ** Warning: (vsim-8891) All optimizations are turned off because the -novopt switch is in effect. This will cause your simulation to run very slowly. If you are using this switch to preserve visibility for Debug or PLI features please see the User's Manual section on Preserving Object Visibility with vopt.
# Loading sv_std.std
# Loading work.operation
# Loading work.ece564_project_tb_top_v_unit
# Loading work.tb_top
# Loading work.dut_ifc
# Loading work.dut_wrapper
# Loading work.MyDesign
# Loading work.controller
# Loading work.mac
# Loading work.DW02_mult_3_stage
# Loading work.sram
# Loading work.test
run 16000ns
# @                   0: INFO: Initialize memories
# 12 4
# @                   0: INFO: Initialize Memories
# @                 295: INFO: Memory Checker running
# @295 :INFO: Input Array 
# IA = [
#  12579   -3150   15584   18357   17791   -2942   11576  -10913  -17007    5883  -16281    4586  ;
#  17282   -2288   13897  -15256   14622   -8114    4530     354   10408   -2975   -9824   -4870  ;
# -15713   -1399    5228   -7920   16784  -13830  -19651    7785  -11515  -14584    9978  -18716  ;
#   7204   10017    2416    6906   11613    5368  -14010    1150  -14404  -11842    -988   -3131  ;
#  -1294  -16093   14075     674   17598  -10939   12993  -10468    2774   14857  -10516    8477  ;
#   1046  -16696    7316   -8374   17078    2488   -6603   -3255   16833   -5312  -17074  -14117  ;
#  -7497   10285   15998   17310   -6240  -10261   11635   -8166   -1298   -9664   19437  -10346  ;
#   1803   -7383    3043   11441   -8204  -15498    3125    6197    6087  -14690   10023     350  ;
#   4652   15106    9792    6845  -14539     526   -2263  -11101  -19570   -9435   14624  -13441  ;
# -12763  -17856   -2607  -17508  -12639    9767   -9820   18726  -18579   11375   -3556    2414  ;
#  -6442    8947  -13008    6905   -4020   -2138   15799  -15314    5561   10729    5826   -4808  ;
# -18724   18980   14963    4153  -13879   17325    -539  -17869  -11901    8844  -17182   18942  ;
# ]
# @295 :INFO: ROI : {0,0} 
# ROI[1] = [
#  12579   -3150   15584   18357   17791   -2942  ;
#  17282   -2288   13897  -15256   14622   -8114  ;
# -15713   -1399    5228   -7920   16784  -13830  ;
#   7204   10017    2416    6906   11613    5368  ;
#  -1294  -16093   14075     674   17598  -10939  ;
#   1046  -16696    7316   -8374   17078    2488  ;
# ]
# 
# @295 :INFO: ROI : {0,1} 
# ROI[2] = [
#  11576  -10913  -17007    5883  -16281    4586  ;
#   4530     354   10408   -2975   -9824   -4870  ;
# -19651    7785  -11515  -14584    9978  -18716  ;
# -14010    1150  -14404  -11842    -988   -3131  ;
#  12993  -10468    2774   14857  -10516    8477  ;
#  -6603   -3255   16833   -5312  -17074  -14117  ;
# ]
# 
# @295 :INFO: ROI : {1,0} 
# ROI[3] = [
#  -7497   10285   15998   17310   -6240  -10261  ;
#   1803   -7383    3043   11441   -8204  -15498  ;
#   4652   15106    9792    6845  -14539     526  ;
# -12763  -17856   -2607  -17508  -12639    9767  ;
#  -6442    8947  -13008    6905   -4020   -2138  ;
# -18724   18980   14963    4153  -13879   17325  ;
# ]
# 
# @295 :INFO: ROI : {1,1} 
# ROI[4] = [
#  11635   -8166   -1298   -9664   19437  -10346  ;
#   3125    6197    6087  -14690   10023     350  ;
#  -2263  -11101  -19570   -9435   14624  -13441  ;
#  -9820   18726  -18579   11375   -3556    2414  ;
#  15799  -15314    5561   10729    5826   -4808  ;
#   -539  -17869  -11901    8844  -17182   18942  ;
# ]
# 
# @295 :INFO: B-vectors 
# B = [
# -13435   18765   -5643  -17177   -6822  -10447    9571   14312   -1344  ;
#  16548   13336   10838   18696   -3168  -17654   12477  -12215    9841  ;
#  17993   16168   16844   11142    8397   -9046   -1313  -16437    -664  ;
#  -3392    5206   13799  -15760  -19918   -2012   19412    -681    6108  ;
# ]
# 
# @295 :INFO: Layer Quadrant Arrays 
# @295 :INFO: Layer 0, Quadrant {0,0}
# Q(0,:,:) = [
#      0    8146  
#      0    3638  
# ]
# 
# @295 :INFO: Layer 0, Quadrant {0,1}
# Q(0,:,:) = [
#      0       0  
#      0       0  
# ]
# 
# @295 :INFO: Layer 0, Quadrant {1,0}
# Q(0,:,:) = [
#   6692       0  
#   1662       0  
# ]
# 
# @295 :INFO: Layer 0, Quadrant {1,1}
# Q(0,:,:) = [
#      0   13279  
#   1804       0  
# ]
# 
# @295 :INFO: Layer 1, Quadrant {0,0}
# Q(1,:,:) = [
#   4463       0  
#   5283    2879  
# ]
# 
# @295 :INFO: Layer 1, Quadrant {0,1}
# Q(1,:,:) = [
#      0       0  
#      0       0  
# ]
# 
# @295 :INFO: Layer 1, Quadrant {1,0}
# Q(1,:,:) = [
#   2437   13331  
#      0    3341  
# ]
# 
# @295 :INFO: Layer 1, Quadrant {1,1}
# Q(1,:,:) = [
#      0       0  
#   3448   14352  
# ]
# 
# @295 :INFO: Layer 2, Quadrant {0,0}
# Q(2,:,:) = [
#   8021    5161  
#   4937    5879  
# ]
# 
# @295 :INFO: Layer 2, Quadrant {0,1}
# Q(2,:,:) = [
#      0       0  
#      0     240  
# ]
# 
# @295 :INFO: Layer 2, Quadrant {1,0}
# Q(2,:,:) = [
#      0    7112  
#      0       0  
# ]
# 
# @295 :INFO: Layer 2, Quadrant {1,1}
# Q(2,:,:) = [
#   4359       0  
#   1717   10040  
# ]
# 
# @295 :INFO: Layer 3, Quadrant {0,0}
# Q(3,:,:) = [
#      0       0  
#   6866       0  
# ]
# 
# @295 :INFO: Layer 3, Quadrant {0,1}
# Q(3,:,:) = [
#      0       0  
#      0       0  
# ]
# 
# @295 :INFO: Layer 3, Quadrant {1,0}
# Q(3,:,:) = [
#   8423       0  
#      0    4574  
# ]
# 
# @295 :INFO: Layer 3, Quadrant {1,1}
# Q(3,:,:) = [
#      0       0  
#      0       0  
# ]
# 
# @295 :INFO: M-vectors 
# M = [
#   6552    -800   -3633    6451  -14670    2147   14429   16916   -7814    9927   -7934    8302   12070   15606   -5184  -19316    7053  -11087   -2160  -19321  -17148  -17229   -5819   17906    7947   10611     778   16963   -9775    8800  -11410   -9511   16682   12481    3719    -377   -3268     500  -13696   -5190   -2846   -4759   12944   15168   13738   13869    4613  -10473   -9678    7692  -14696   19406   16754   13321   12251    1078    6424    4556   -6934  -13128   13072    1582   14382  -12906  
#  12481    3719    -377   -3268     500  -13696   -5190   -2846   -4759   12944   15168   13738   13869    4613  -10473   -9678    7692  -14696   19406   16754   13321   12251    1078    6424    4556   -6934  -13128   13072    1582   14382  -12906   -1719   13430    4099   17376   15135      82   -3912   12554   17096   -2388   -7901    1226     192   -1372   19951    9621   -8650   -3577   10042    5175  -10450   -8363   19708   11848  -15060   -5477    6772  -17179    5035   -9371   10397   14399    4601  
#   4099   17376   15135      82   -3912   12554   17096   -2388   -7901    1226     192   -1372   19951    9621   -8650   -3577   10042    5175  -10450   -8363   19708   11848  -15060   -5477    6772  -17179    5035   -9371   10397   14399    4601    4653    3141   16705  -11752   -1081    4460   18390  -18435  -14048  -14382    -956   -7805   14318   18415  -14857  -16649    5785    9625   17440   -2441   -8158      60  -17944    7089    3595   -6087   17463    5771    4848    6052  -14606   11214  -18554  
#  16705  -11752   -1081    4460   18390  -18435  -14048  -14382    -956   -7805   14318   18415  -14857  -16649    5785    9625   17440   -2441   -8158      60  -17944    7089    3595   -6087   17463    5771    4848    6052  -14606   11214  -18554   -9802   16875     -74   18206   17451    2992   15689    6901   -6276   -4785    8315    2677   -6945  -18381  -10808  -15845   17088   15546   12952  -10774   -4272   -8985   -1767  -12301   -8910     720   12795  -16903   -5940  -10449   13352   16556   -3178  
#    -74   18206   17451    2992   15689    6901   -6276   -4785    8315    2677   -6945  -18381  -10808  -15845   17088   15546   12952  -10774   -4272   -8985   -1767  -12301   -8910     720   12795  -16903   -5940  -10449   13352   16556   -3178   18727  -17934   17382  -12850   12813   18484   -9414    -694   13048   16368    3355  -18129   -9544   12317   12066   12346  -16019    7482   -5032  -13298   -5429   -7977   -8828    -423   17239    1692   17681   -5198   17701    1989     334  -19044    1651  
#  17382  -12850   12813   18484   -9414    -694   13048   16368    3355  -18129   -9544   12317   12066   12346  -16019    7482   -5032  -13298   -5429   -7977   -8828    -423   17239    1692   17681   -5198   17701    1989     334  -19044    1651   14863    7012  -15411   -5684    3241    9164  -18961  -18871  -11400    5662    5821   14534    9726   -8166   17357   -8168  -11369     418   18802    7888   -3270   -8276    1313  -13767  -19231   -6484   10269   12214   12310   18349    4042   -2632    2873  
# -15411   -5684    3241    9164  -18961  -18871  -11400    5662    5821   14534    9726   -8166   17357   -8168  -11369     418   18802    7888   -3270   -8276    1313  -13767  -19231   -6484   10269   12214   12310   18349    4042   -2632    2873   14739   11319   18443  -18816   17807  -17250    9880   14769   -6547   19831    1443  -13984   18314   16567  -18416   -5596   13145   11921    4800    8479  -16934  -14679   -9020    6263   -9520   15951   -3107   -7797   -2818   19111   18960  -11103  -16974  
#  18443  -18816   17807  -17250    9880   14769   -6547   19831    1443  -13984   18314   16567  -18416   -5596   13145   11921    4800    8479  -16934  -14679   -9020    6263   -9520   15951   -3107   -7797   -2818   19111   18960  -11103  -16974  -19153   -6163   -7099   -5274  -12097    4769  -15841  -14077   16502   -4121   -9038  -13169   16474  -11986   19217   -1112    3041   17322   15436    4818   -5102    6492    7659   -9416   12056   12759   11542  -18679    6085   19202    5663    6544  -18406  
# ]
# 
# @295 :INFO: Layers of Merged Array 
# @295 :INFO: Layer 0 
# Qm = [
#      0    8146       0       0  
#      0    3638       0       0  
#   6692       0       0   13279  
#   1662       0    1804       0  
# ]
# 
# @295 :INFO: Layer 1 
# Qm = [
#   4463       0       0       0  
#   5283    2879       0       0  
#   2437   13331       0       0  
#      0    3341    3448   14352  
# ]
# 
# @295 :INFO: Layer 2 
# Qm = [
#   8021    5161       0       0  
#   4937    5879       0     240  
#      0    7112    4359       0  
#      0       0    1717   10040  
# ]
# 
# @295 :INFO: Layer 3 
# Qm = [
#      0       0       0       0  
#   6866       0       0       0  
#   8423       0       0       0  
#      0    4574       0       0  
# ]
# 
# @295 :INFO: Output Vector
# O = [
#   3984    1616    5251    7292       0       0    9535       0  ]
# 
# @                 305: INFO: Start
# @               10625: INFO: Output Memory Write, addr=0
# @               10625: INFO: Output Value for element {0} = 0f90
# @               10625: PASS: Output Memory Write, writing 0f90, expecting 0f90, output status=00000001
# @               11315: INFO: Output Memory Write, addr=1
# @               11315: INFO: Output Value for element {1} = 0650
# @               11315: PASS: Output Memory Write, writing 0650, expecting 0650, output status=00000011
# @               12005: INFO: Output Memory Write, addr=2
# @               12005: INFO: Output Value for element {2} = 1483
# @               12005: PASS: Output Memory Write, writing 1483, expecting 1483, output status=00000111
# @               12695: INFO: Output Memory Write, addr=3
# @               12695: INFO: Output Value for element {3} = 1c7c
# @               12695: PASS: Output Memory Write, writing 1c7c, expecting 1c7c, output status=00001111
# @               13385: INFO: Output Memory Write, addr=4
# @               13385: INFO: Output Value for element {4} = 0000
# @               13385: PASS: Output Memory Write, writing 0000, expecting 0000, output status=00011111
# @               14075: INFO: Output Memory Write, addr=5
# @               14075: INFO: Output Value for element {5} = 0000
# @               14075: PASS: Output Memory Write, writing 0000, expecting 0000, output status=00111111
# @               14765: INFO: Output Memory Write, addr=6
# @               14765: INFO: Output Value for element {6} = 253f
# @               14765: PASS: Output Memory Write, writing 253f, expecting 253f, output status=01111111
# @               15455: INFO: Output Memory Write, addr=7
# @               15455: INFO: Output Value for element {7} = 0000
# @               15455: PASS: Output Memory Write, writing 0000, expecting 0000, output status=11111111
# @               15465: INFO: Done
# @               15465: PASS: Output array status: 11111111
# @               15475: INFO: Start
vsim -sv_seed 4 tb_top
# vsim 
# Start time: 16:36:52 on Nov 12,2017
# ** Warning: (vsim-8891) All optimizations are turned off because the -novopt switch is in effect. This will cause your simulation to run very slowly. If you are using this switch to preserve visibility for Debug or PLI features please see the User's Manual section on Preserving Object Visibility with vopt.
# Loading sv_std.std
# Loading work.operation
# Loading work.ece564_project_tb_top_v_unit
# Loading work.tb_top
# Loading work.dut_ifc
# Loading work.dut_wrapper
# Loading work.MyDesign
# Loading work.controller
# Loading work.mac
# Loading work.DW02_mult_3_stage
# Loading work.sram
# Loading work.test
run 16000ns
# @                   0: INFO: Initialize memories
# 12 4
# @                   0: INFO: Initialize Memories
# @                 295: INFO: Memory Checker running
# @295 :INFO: Input Array 
# IA = [
#   9454  -17469   -1260   -8851    6195    7340  -10005   10282   17204    8065   17877   12629  ;
# -11352  -12541  -18819   -1051   15851   11764   15437  -19459    6686  -15429   -5920  -10150  ;
# -18148    9814   15428   -9021   -6511  -18271  -11920   -5352   15427   11111   15109   10635  ;
# -14034  -18543    3308  -19759   -1767   -3953  -17345  -14551   -3968   -7620   -5680  -18330  ;
#  13163  -10855   -5249   -7795   -1841    1560    -419    3757   -4328   -2751  -11307   14347  ;
# -13662   -5485    2579   -5041     541  -14645    7386   19952  -12157   10489  -14308    -726  ;
#   5551  -11661  -19813   10008  -17444   -4260  -13381    7317    4083   18855  -18748  -12515  ;
# -11712   17970   13272   -7026  -14804   16177   16813  -14227   14588   -7065   -3840    1546  ;
# -19803    6389   10590  -13927    8864  -17882  -17630    5054    9173   15110   -7763   16847  ;
#   4526    1103    9550   -5830   16539   -3095    5482   16818   10109    2243  -18954    8578  ;
#  16425  -14255   -6566  -16107   -7747   15112    4348      42   13179    6015   12384  -16692  ;
# -17469   -6999   -1584   -1686  -12042   16238    5148   18514   -3064   19721    8856    1815  ;
# ]
# @295 :INFO: ROI : {0,0} 
# ROI[1] = [
#   9454  -17469   -1260   -8851    6195    7340  ;
# -11352  -12541  -18819   -1051   15851   11764  ;
# -18148    9814   15428   -9021   -6511  -18271  ;
# -14034  -18543    3308  -19759   -1767   -3953  ;
#  13163  -10855   -5249   -7795   -1841    1560  ;
# -13662   -5485    2579   -5041     541  -14645  ;
# ]
# 
# @295 :INFO: ROI : {0,1} 
# ROI[2] = [
# -10005   10282   17204    8065   17877   12629  ;
#  15437  -19459    6686  -15429   -5920  -10150  ;
# -11920   -5352   15427   11111   15109   10635  ;
# -17345  -14551   -3968   -7620   -5680  -18330  ;
#   -419    3757   -4328   -2751  -11307   14347  ;
#   7386   19952  -12157   10489  -14308    -726  ;
# ]
# 
# @295 :INFO: ROI : {1,0} 
# ROI[3] = [
#   5551  -11661  -19813   10008  -17444   -4260  ;
# -11712   17970   13272   -7026  -14804   16177  ;
# -19803    6389   10590  -13927    8864  -17882  ;
#   4526    1103    9550   -5830   16539   -3095  ;
#  16425  -14255   -6566  -16107   -7747   15112  ;
# -17469   -6999   -1584   -1686  -12042   16238  ;
# ]
# 
# @295 :INFO: ROI : {1,1} 
# ROI[4] = [
# -13381    7317    4083   18855  -18748  -12515  ;
#  16813  -14227   14588   -7065   -3840    1546  ;
# -17630    5054    9173   15110   -7763   16847  ;
#   5482   16818   10109    2243  -18954    8578  ;
#   4348      42   13179    6015   12384  -16692  ;
#   5148   18514   -3064   19721    8856    1815  ;
# ]
# 
# @295 :INFO: B-vectors 
# B = [
# -12688  -17944    2010   -5138    3918  -14132  -14453   -6997  -14858  ;
#  10997    8350   15245   15739   15944  -11137   -3017    -219    2758  ;
# -16696   16007   -9191  -12023    1558   10969   11292   -8183    2458  ;
#  11496    8886   12588  -10318   -4293   -1533   18011  -19096    1108  ;
# ]
# 
# @295 :INFO: Layer Quadrant Arrays 
# @295 :INFO: Layer 0, Quadrant {0,0}
# Q(0,:,:) = [
#   6569    5562  
#  10360    8726  
# ]
# 
# @295 :INFO: Layer 0, Quadrant {0,1}
# Q(0,:,:) = [
#      0       0  
#   7408       0  
# ]
# 
# @295 :INFO: Layer 0, Quadrant {1,0}
# Q(0,:,:) = [
#   1925    5064  
#   3349       0  
# ]
# 
# @295 :INFO: Layer 0, Quadrant {1,1}
# Q(0,:,:) = [
#      0       0  
#      0    3180  
# ]
# 
# @295 :INFO: Layer 1, Quadrant {0,0}
# Q(1,:,:) = [
#      0    2284  
#      0       0  
# ]
# 
# @295 :INFO: Layer 1, Quadrant {0,1}
# Q(1,:,:) = [
#   2686    3033  
#      0       0  
# ]
# 
# @295 :INFO: Layer 1, Quadrant {1,0}
# Q(1,:,:) = [
#      0       0  
#   5474       0  
# ]
# 
# @295 :INFO: Layer 1, Quadrant {1,1}
# Q(1,:,:) = [
#      0       0  
#   3801    6389  
# ]
# 
# @295 :INFO: Layer 2, Quadrant {0,0}
# Q(2,:,:) = [
#      0    3850  
#      0    5318  
# ]
# 
# @295 :INFO: Layer 2, Quadrant {0,1}
# Q(2,:,:) = [
#      0    1958  
#      0    9328  
# ]
# 
# @295 :INFO: Layer 2, Quadrant {1,0}
# Q(2,:,:) = [
#      0       0  
#      0   13081  
# ]
# 
# @295 :INFO: Layer 2, Quadrant {1,1}
# Q(2,:,:) = [
#    317       0  
#   1162       0  
# ]
# 
# @295 :INFO: Layer 3, Quadrant {0,0}
# Q(3,:,:) = [
#      0       0  
#      0       0  
# ]
# 
# @295 :INFO: Layer 3, Quadrant {0,1}
# Q(3,:,:) = [
#    175    8149  
#      0    2250  
# ]
# 
# @295 :INFO: Layer 3, Quadrant {1,0}
# Q(3,:,:) = [
#      0       0  
#      0    6635  
# ]
# 
# @295 :INFO: Layer 3, Quadrant {1,1}
# Q(3,:,:) = [
#      0    6388  
#    156     973  
# ]
# 
# @295 :INFO: M-vectors 
# M = [
#  -8706   -9688   -6318   -8922  -14528   16370     583   12910   -6571    -335   14130  -17647   15872   17882   10945    5490    3976   19016  -12435   11122    3584    4575   17430   14152   -8809    1699  -14621  -10463   18657   -4804  -10363   -2167   -6035    6751    3230   -8289  -17124   -3888    1896    4954   -6358   16002   12906   -2097   -1985   19932   -8882   -4053     138    2107  -15660   14796    5291    5348    9875    4931   11648  -10651    -620   10396  -12539   18803   16365   14500  
#   6751    3230   -8289  -17124   -3888    1896    4954   -6358   16002   12906   -2097   -1985   19932   -8882   -4053     138    2107  -15660   14796    5291    5348    9875    4931   11648  -10651    -620   10396  -12539   18803   16365   14500  -17360  -18953  -15263   13920  -14386  -11442  -11007    5425   14894  -14185  -16516    3809   12964    8894    2546   14439    2616    1931   -9562    7784  -12343   -8965    1283    9029   -1572   -2992   19668   17785   11190   -8629   -7804  -19548   -2891  
# -15263   13920  -14386  -11442  -11007    5425   14894  -14185  -16516    3809   12964    8894    2546   14439    2616    1931   -9562    7784  -12343   -8965    1283    9029   -1572   -2992   19668   17785   11190   -8629   -7804  -19548   -2891   -6014  -17680   -7530   13307  -10977   10437   11507    1878   -4537   -3478   12595  -19218   17561    -517    -748    9887      49  -11092  -12050  -18486  -19101    9941   17971    1891   11721  -13791    3421  -16768   -3064    7460    3902    2597  -14458  
#  -7530   13307  -10977   10437   11507    1878   -4537   -3478   12595  -19218   17561    -517    -748    9887      49  -11092  -12050  -18486  -19101    9941   17971    1891   11721  -13791    3421  -16768   -3064    7460    3902    2597  -14458   11411   -7327   13982   14848    2002   19999  -19938   18474   -6631   14527   18865  -11977    1306   10339  -10588     692   -9585   -5685   15020   -9913   15160    9707    2933   17936    3406   10203  -10935    5794     758    3697    7119   11535   12326  
#  13982   14848    2002   19999  -19938   18474   -6631   14527   18865  -11977    1306   10339  -10588     692   -9585   -5685   15020   -9913   15160    9707    2933   17936    3406   10203  -10935    5794     758    3697    7119   11535   12326   10000    6523    4136   13559  -19335   -1055  -12775  -14032   -1931    6183   -7053    9166  -16433  -17015    -355    9117    -459  -13005   16177   -6805  -11120  -12129   17724    7886   16175   -8874   -7534   11664    7512   15116    3797   18074  -16628  
#   4136   13559  -19335   -1055  -12775  -14032   -1931    6183   -7053    9166  -16433  -17015    -355    9117    -459  -13005   16177   -6805  -11120  -12129   17724    7886   16175   -8874   -7534   11664    7512   15116    3797   18074  -16628   15106    8622  -15369   -2835    5440    3187   -2707  -17236   -4868  -16570  -13471   -2064   -8685  -11991    8734   17733    -387   -1424    7470   -7576   19636   17315    5960     511    2871   12991  -10430  -10545    1517  -19675   -1756   11382   15443  
# -15369   -2835    5440    3187   -2707  -17236   -4868  -16570  -13471   -2064   -8685  -11991    8734   17733    -387   -1424    7470   -7576   19636   17315    5960     511    2871   12991  -10430  -10545    1517  -19675   -1756   11382   15443   -2510   -4842   -5249   10475    5218   17650  -15355    1287   -5163   -2616   -5388    -153    2188    8697  -13975   11808  -16883   15819   13163   -7858   -8283    7931    -536   -6626    2656   13754   15442   15527  -12589    8457   14862    6811   -7395  
#  -5249   10475    5218   17650  -15355    1287   -5163   -2616   -5388    -153    2188    8697  -13975   11808  -16883   15819   13163   -7858   -8283    7931    -536   -6626    2656   13754   15442   15527  -12589    8457   14862    6811   -7395  -15490    8279    7811    3186    -598   10729    7227   -9469   13641    5313    9018    6365    7671     890  -15084  -17745   -7100   11861  -15893   14588   13782  -18935   15727   12412  -15189  -14315  -16160    3598    3342    2100   -8854   11785   -3203  
# ]
# 
# @295 :INFO: Layers of Merged Array 
# @295 :INFO: Layer 0 
# Qm = [
#   6569    5562       0       0  
#  10360    8726    7408       0  
#   1925    5064       0       0  
#   3349       0       0    3180  
# ]
# 
# @295 :INFO: Layer 1 
# Qm = [
#      0    2284    2686    3033  
#      0       0       0       0  
#      0       0       0       0  
#   5474       0    3801    6389  
# ]
# 
# @295 :INFO: Layer 2 
# Qm = [
#      0    3850       0    1958  
#      0    5318       0    9328  
#      0       0     317       0  
#      0   13081    1162       0  
# ]
# 
# @295 :INFO: Layer 3 
# Qm = [
#      0       0     175    8149  
#      0       0       0    2250  
#      0       0       0    6388  
#      0    6635     156     973  
# ]
# 
# @295 :INFO: Output Vector
# O = [
#  10086    3991       0       0    1597      23       0       0  ]
# 
# @                 305: INFO: Start
# @               10625: INFO: Output Memory Write, addr=0
# @               10625: INFO: Output Value for element {0} = 2766
# @               10625: PASS: Output Memory Write, writing 2766, expecting 2766, output status=00000001
# @               11315: INFO: Output Memory Write, addr=1
# @               11315: INFO: Output Value for element {1} = 0f97
# @               11315: PASS: Output Memory Write, writing 0f97, expecting 0f97, output status=00000011
# @               12005: INFO: Output Memory Write, addr=2
# @               12005: INFO: Output Value for element {2} = 0000
# @               12005: PASS: Output Memory Write, writing 0000, expecting 0000, output status=00000111
# @               12695: INFO: Output Memory Write, addr=3
# @               12695: INFO: Output Value for element {3} = 0000
# @               12695: PASS: Output Memory Write, writing 0000, expecting 0000, output status=00001111
# @               13385: INFO: Output Memory Write, addr=4
# @               13385: INFO: Output Value for element {4} = 063d
# @               13385: PASS: Output Memory Write, writing 063d, expecting 063d, output status=00011111
# @               14075: INFO: Output Memory Write, addr=5
# @               14075: INFO: Output Value for element {5} = 0017
# @               14075: PASS: Output Memory Write, writing 0017, expecting 0017, output status=00111111
# @               14765: INFO: Output Memory Write, addr=6
# @               14765: INFO: Output Value for element {6} = 0000
# @               14765: PASS: Output Memory Write, writing 0000, expecting 0000, output status=01111111
# @               15455: INFO: Output Memory Write, addr=7
# @               15455: INFO: Output Value for element {7} = 0000
# @               15455: PASS: Output Memory Write, writing 0000, expecting 0000, output status=11111111
# @               15465: INFO: Done
# @               15465: PASS: Output array status: 11111111
# @               15475: INFO: Start
vsim -sv_seed 2 tb_top
# vsim 
# Start time: 16:37:35 on Nov 12,2017
# ** Warning: (vsim-8891) All optimizations are turned off because the -novopt switch is in effect. This will cause your simulation to run very slowly. If you are using this switch to preserve visibility for Debug or PLI features please see the User's Manual section on Preserving Object Visibility with vopt.
# Loading sv_std.std
# Loading work.operation
# Loading work.ece564_project_tb_top_v_unit
# Loading work.tb_top
# Loading work.dut_ifc
# Loading work.dut_wrapper
# Loading work.MyDesign
# Loading work.controller
# Loading work.mac
# Loading work.DW02_mult_3_stage
# Loading work.sram
# Loading work.test
run 16000ns
# @                   0: INFO: Initialize memories
# 12 4
# @                   0: INFO: Initialize Memories
# @                 295: INFO: Memory Checker running
# @295 :INFO: Input Array 
# IA = [
# -15830   19909   -9569   18258    2144   -5037   13826   19944   -4991    4311  -12383    7801  ;
# -10511    9298     607   10795  -18978   12772   -7673   -4159   10832    9947   -8528   -8052  ;
#  -6907    8278   -3312   -2788   13300   18854   15461    2543    5570  -18218   16853   12749  ;
# -14395   -7765    9779   -8441   -7014  -13021    3476  -19296   13060  -10276    -593    -428  ;
# -18883   11559    5407   16847    2459   -4199   -9413  -13309  -11111   -2156    1411  -10062  ;
#  -9304   19819   -7529   -7666   10740    8085   -3557    1365   -1344    5493   12410  -10775  ;
# -10508    1249   14943    7049   -6571   -3503  -12539  -17678  -15270    4423   14384   14043  ;
# -16374  -16182      84   -1254  -10112   -8542   -7408   -3249   13518  -19257    6939     -86  ;
#  10743    7749    1473    9934    3437  -10208  -13974   -5789  -16465    5755   -9538     368  ;
#  -3423    7191   15406   -3160       0     291   -8558   16821   -2904   15314  -15478    3597  ;
#   2582    4371   -5538  -16621    4463  -14341    -335   -3182   -6400   19273  -16421  -13256  ;
#   2880   -1516  -16622   -4977   -8108  -14613  -10853    2676    4680   18678   12426   17996  ;
# ]
# @295 :INFO: ROI : {0,0} 
# ROI[1] = [
# -15830   19909   -9569   18258    2144   -5037  ;
# -10511    9298     607   10795  -18978   12772  ;
#  -6907    8278   -3312   -2788   13300   18854  ;
# -14395   -7765    9779   -8441   -7014  -13021  ;
# -18883   11559    5407   16847    2459   -4199  ;
#  -9304   19819   -7529   -7666   10740    8085  ;
# ]
# 
# @295 :INFO: ROI : {0,1} 
# ROI[2] = [
#  13826   19944   -4991    4311  -12383    7801  ;
#  -7673   -4159   10832    9947   -8528   -8052  ;
#  15461    2543    5570  -18218   16853   12749  ;
#   3476  -19296   13060  -10276    -593    -428  ;
#  -9413  -13309  -11111   -2156    1411  -10062  ;
#  -3557    1365   -1344    5493   12410  -10775  ;
# ]
# 
# @295 :INFO: ROI : {1,0} 
# ROI[3] = [
# -10508    1249   14943    7049   -6571   -3503  ;
# -16374  -16182      84   -1254  -10112   -8542  ;
#  10743    7749    1473    9934    3437  -10208  ;
#  -3423    7191   15406   -3160       0     291  ;
#   2582    4371   -5538  -16621    4463  -14341  ;
#   2880   -1516  -16622   -4977   -8108  -14613  ;
# ]
# 
# @295 :INFO: ROI : {1,1} 
# ROI[4] = [
# -12539  -17678  -15270    4423   14384   14043  ;
#  -7408   -3249   13518  -19257    6939     -86  ;
# -13974   -5789  -16465    5755   -9538     368  ;
#  -8558   16821   -2904   15314  -15478    3597  ;
#   -335   -3182   -6400   19273  -16421  -13256  ;
# -10853    2676    4680   18678   12426   17996  ;
# ]
# 
# @295 :INFO: B-vectors 
# B = [
#   -625    7995    3397    2650    -567   13518     555   -4159  -17538  ;
# -18664   -8386    1204  -11581  -12926  -19378    8817  -10299    7848  ;
#  -1526   -4153  -18479    6297   10374   10343    -764   16454  -18615  ;
#  11225   10522   12786    4682   17132    4352  -18586    -778  -14146  ;
# ]
# 
# @295 :INFO: Layer Quadrant Arrays 
# @295 :INFO: Layer 0, Quadrant {0,0}
# Q(0,:,:) = [
#   2005       0  
#    626       0  
# ]
# 
# @295 :INFO: Layer 0, Quadrant {0,1}
# Q(0,:,:) = [
#   2481       0  
#      0       0  
# ]
# 
# @295 :INFO: Layer 0, Quadrant {1,0}
# Q(0,:,:) = [
#      0       0  
#   5201     759  
# ]
# 
# @295 :INFO: Layer 0, Quadrant {1,1}
# Q(0,:,:) = [
#   4343    2139  
#      0       0  
# ]
# 
# @295 :INFO: Layer 1, Quadrant {0,0}
# Q(1,:,:) = [
#      0       0  
#      0       0  
# ]
# 
# @295 :INFO: Layer 1, Quadrant {0,1}
# Q(1,:,:) = [
#      0       0  
#   8438    3570  
# ]
# 
# @295 :INFO: Layer 1, Quadrant {1,0}
# Q(1,:,:) = [
#   9571    3084  
#      0    6057  
# ]
# 
# @295 :INFO: Layer 1, Quadrant {1,1}
# Q(1,:,:) = [
#    563    1534  
#   1490    4153  
# ]
# 
# @295 :INFO: Layer 2, Quadrant {0,0}
# Q(2,:,:) = [
#   5462       0  
#   6161    6147  
# ]
# 
# @295 :INFO: Layer 2, Quadrant {0,1}
# Q(2,:,:) = [
#      0       0  
#      0    4938  
# ]
# 
# @295 :INFO: Layer 2, Quadrant {1,0}
# Q(2,:,:) = [
#      0    1817  
#      0       0  
# ]
# 
# @295 :INFO: Layer 2, Quadrant {1,1}
# Q(2,:,:) = [
#  10011       0  
#      0       0  
# ]
# 
# @295 :INFO: Layer 3, Quadrant {0,0}
# Q(3,:,:) = [
#   2913       0  
#   4255       0  
# ]
# 
# @295 :INFO: Layer 3, Quadrant {0,1}
# Q(3,:,:) = [
#      0     433  
#      0       0  
# ]
# 
# @295 :INFO: Layer 3, Quadrant {1,0}
# Q(3,:,:) = [
#      0       0  
#   7322    3204  
# ]
# 
# @295 :INFO: Layer 3, Quadrant {1,1}
# Q(3,:,:) = [
#      0    4640  
#   1423       0  
# ]
# 
# @295 :INFO: M-vectors 
# M = [
# -14845   -7726   11742    9496   -1589   10150   19000  -14003   17016    8500    2843    9499   -7945    2599   -6118   16570   -1411    3174   19834   19124   16563     318   13484      31   -1052   16964   16222    2654   11630   -8674  -12784  -14640   -2672    4848   -4130    1250  -12071   15563    -709   -3668   -3161   -9273   19866   16602   12288    7631   -7328    7190   -8051  -16716    5158   13502    1667     653  -14340   10606    7554  -13177    7442   -2453   -2088    1336    4149   15297  
#   4848   -4130    1250  -12071   15563    -709   -3668   -3161   -9273   19866   16602   12288    7631   -7328    7190   -8051  -16716    5158   13502    1667     653  -14340   10606    7554  -13177    7442   -2453   -2088    1336    4149   15297    7373   18736  -16275   -8249  -14343  -18639    9759   -1707    2358    -899    7742   18940    2915  -19624  -16214    4031   -1753  -18224    5306    9505   -2147   13940   15938   13936   -5519   13158   15889    8981  -18415    5813    2859   -4170    7298  
# -16275   -8249  -14343  -18639    9759   -1707    2358    -899    7742   18940    2915  -19624  -16214    4031   -1753  -18224    5306    9505   -2147   13940   15938   13936   -5519   13158   15889    8981  -18415    5813    2859   -4170    7298    2178  -15372  -14892    9120  -19335     468    8055      20    7033   10986    1648    -647  -16137  -10162  -11740    8312   13505   18688   11640   19092  -13198   -9040  -10316    1156   -1311    8299  -13900   -2677  -11325    1201   -7545   -1595   16130  
# -14892    9120  -19335     468    8055      20    7033   10986    1648    -647  -16137  -10162  -11740    8312   13505   18688   11640   19092  -13198   -9040  -10316    1156   -1311    8299  -13900   -2677  -11325    1201   -7545   -1595   16130     -60   17777    9343    8760    9199   18530   -4237   -2337    8229   -5948    -285   -5286    3601    8632   15409    1272   -9368  -19961   14609   -7897   -5463   10749   -4734   13514    4815   16485  -15750  -10258  -18505    8892   19970     715   15989  
#   9343    8760    9199   18530   -4237   -2337    8229   -5948    -285   -5286    3601    8632   15409    1272   -9368  -19961   14609   -7897   -5463   10749   -4734   13514    4815   16485  -15750  -10258  -18505    8892   19970     715   15989    9674  -15481  -11174   17262   16947   -3805    5776  -11404     900   -5451    9013   -7234     106   -8507   -9156  -15871    7091  -18808   14403    6097   13833   17367   -7894    5361  -17642   14237   -7819  -12233    2889   15160    1723   12161   15329  
# -11174   17262   16947   -3805    5776  -11404     900   -5451    9013   -7234     106   -8507   -9156  -15871    7091  -18808   14403    6097   13833   17367   -7894    5361  -17642   14237   -7819  -12233    2889   15160    1723   12161   15329   14283    6541    -474  -18151    1900    7869  -19149   -3791  -15652  -15993    4873   -6149  -16008   -9943   14147  -10598  -14885   -4866   -3927   10779   -7596  -15514    4886  -11072   19298   -4935   -3174   18682    5574   11573   -9103  -15345  -16498  
#   -474  -18151    1900    7869  -19149   -3791  -15652  -15993    4873   -6149  -16008   -9943   14147  -10598  -14885   -4866   -3927   10779   -7596  -15514    4886  -11072   19298   -4935   -3174   18682    5574   11573   -9103  -15345  -16498  -11876    2651   10972  -18408    1740  -17998   -5811  -16091    6101   16816   -3605   -6510    8839    3579    1665  -16015  -11909   12968  -11693    2156     386   -2497   13781    1417  -14090   -2023  -17824   -4568  -16835   -6642   -9231    4350    9333  
#  10972  -18408    1740  -17998   -5811  -16091    6101   16816   -3605   -6510    8839    3579    1665  -16015  -11909   12968  -11693    2156     386   -2497   13781    1417  -14090   -2023  -17824   -4568  -16835   -6642   -9231    4350    9333  -19979    1661    3772    6389  -18019    1657   10741  -11666   15381    9580   -8282  -16733    2105   15495   -3050    2192   18445   -6294    9238  -15112  -15509   -7281  -12857   15553    8625    7586  -17982   11503    3121    4803  -18745   18479   -6598  
# ]
# 
# @295 :INFO: Layers of Merged Array 
# @295 :INFO: Layer 0 
# Qm = [
#   2005       0    2481       0  
#    626       0       0       0  
#      0       0    4343    2139  
#   5201     759       0       0  
# ]
# 
# @295 :INFO: Layer 1 
# Qm = [
#      0       0       0       0  
#      0       0    8438    3570  
#   9571    3084     563    1534  
#      0    6057    1490    4153  
# ]
# 
# @295 :INFO: Layer 2 
# Qm = [
#   5462       0       0       0  
#   6161    6147       0    4938  
#      0    1817   10011       0  
#      0       0       0       0  
# ]
# 
# @295 :INFO: Layer 3 
# Qm = [
#   2913       0       0     433  
#   4255       0       0       0  
#      0       0       0    4640  
#   7322    3204    1423       0  
# ]
# 
# @295 :INFO: Output Vector
# O = [
#   2628    7183       0       0    2914       0       0       0  ]
# 
# @                 305: INFO: Start
# @               10625: INFO: Output Memory Write, addr=0
# @               10625: INFO: Output Value for element {0} = 0a44
# @               10625: PASS: Output Memory Write, writing 0a44, expecting 0a44, output status=00000001
# @               11315: INFO: Output Memory Write, addr=1
# @               11315: INFO: Output Value for element {1} = 1c0f
# @               11315: PASS: Output Memory Write, writing 1c0f, expecting 1c0f, output status=00000011
# @               12005: INFO: Output Memory Write, addr=2
# @               12005: INFO: Output Value for element {2} = 0000
# @               12005: PASS: Output Memory Write, writing 0000, expecting 0000, output status=00000111
# @               12695: INFO: Output Memory Write, addr=3
# @               12695: INFO: Output Value for element {3} = 0000
# @               12695: PASS: Output Memory Write, writing 0000, expecting 0000, output status=00001111
# @               13385: INFO: Output Memory Write, addr=4
# @               13385: INFO: Output Value for element {4} = 0b62
# @               13385: PASS: Output Memory Write, writing 0b62, expecting 0b62, output status=00011111
# @               14075: INFO: Output Memory Write, addr=5
# @               14075: INFO: Output Value for element {5} = 0000
# @               14075: PASS: Output Memory Write, writing 0000, expecting 0000, output status=00111111
# @               14765: INFO: Output Memory Write, addr=6
# @               14765: INFO: Output Value for element {6} = 0000
# @               14765: PASS: Output Memory Write, writing 0000, expecting 0000, output status=01111111
# @               15455: INFO: Output Memory Write, addr=7
# @               15455: INFO: Output Value for element {7} = 0000
# @               15455: PASS: Output Memory Write, writing 0000, expecting 0000, output status=11111111
# @               15465: INFO: Done
# @               15465: PASS: Output array status: 11111111
# @               15475: INFO: Start
